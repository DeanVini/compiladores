Package calculadora;

Helpers
 digito = ['0' .. '9'];
 espaco = ' ';
 rc = 13;
 nl = 10;
 
Tokens
 numero = digito+;
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 mod = '%';
 par_esq = '(';
 par_dir = ')';
 vazio = (espaco | rc | nl)+;


Ignored Tokens
 vazio;

Productions

//não usa rótulos (colchetes na CST)
 expr {-> a_expr} =
  {fator} fator  {-> fator.a_expr} 
  |{soma} expr soma fator   {-> New a_expr.b_soma(expr.a_expr, fator.a_expr)} 
  |{menos} expr menos fator {-> New a_expr.a_menos(expr.a_expr, fator.a_expr)} 
  ;

//usa rótulos (colchetes na CST)
 fator {-> a_expr} =
  {termo} termo  {-> termo.a_expr} 
  |{mult} [esq]:fator mult [dir]:termo   {-> New a_expr.a_mult(esq.a_expr, dir.a_expr)} 
  |{div} [esq]:fator div [dir]:termo     {-> New a_expr.a_div(esq.a_expr, dir.a_expr)} 
  |{mod} [esq]:fator mod [dir]:termo     {-> New a_expr.a_mod(esq.a_expr, dir.a_expr)}
  ;

 termo {-> a_expr} =
  {numero} numero 			{-> New a_expr.a_numero(numero)} 
  |{expr} par_esq expr par_dir	{-> expr.a_expr}
  ;
  
Abstract Syntax Tree

a_expr = {b_soma} [esq]:a_expr [dir]:a_expr
     | {a_menos} [esq]:a_expr [dir]:a_expr
     | {a_mult} [esq]:a_expr [dir]:a_expr
     | {a_div} [esq]:a_expr [dir]:a_expr
     | {a_mod} [esq]:a_expr [dir]:a_expr
     | {a_numero} numero;
  
